buildscript {
    ext {
        springBootVersion = '3.1.3'
        dependencyManagementVersion = '1.1.3'
        lombokVersion = '1.18.26'
        h2DatabaseVersion = '2.1.214'
        asciidoctorJvmConvertVersion = '3.3.2'
        queryDslVersion = '1.0.10'
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version "${dependencyManagementVersion}"
    id "org.asciidoctor.jvm.convert" version "${asciidoctorJvmConvertVersion}"
    //querydsl 추가
    id "com.ewerk.gradle.plugins.querydsl" version "${queryDslVersion}"
}

group = 'me.jincrates.api'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    asciidoctorExt
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring boot
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // lombok
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    // h2 database
    runtimeOnly "com.h2database:h2:${h2DatabaseVersion}"

    // validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.security:spring-security-test'

    // web client
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation group: 'com.google.code.gson', name: 'gson'
    testImplementation group: 'com.squareup.okhttp3', name: 'okhttp'
    testImplementation group: 'com.squareup.okhttp3', name: 'mockwebserver'

    // JPA
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // QueryDSL
    implementation "com.querydsl:querydsl-jpa:5.0.0:jakarta"
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'

    // Rest Docs
    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
}

tasks.named('test') {
    useJUnitPlatform()
}

ext {
    // 전역 변수
    snippetsDir = file('build/generated-snippets')
}

test {
    // 테스트가 끝난 결과물을 해당 경로에 저장
    outputs.dir snippetsDir
}

asciidoctor {
    inputs.dir snippetsDir
    configurations 'asciidoctorExt'

    sources {
        // 특정 파일만 html로 만든다.
        include("**/index.adoc")
    }
    // 다른 adoc 파일을 include 할 때 경로를 baseDir로 맞춘다.
    baseDirFollowsSourceFile()
    // dependsOn 순서에 의존한다(test 후 실행)
    dependsOn test
}

bootJar {
    dependsOn asciidoctor
    // 문서를 해당 경로로 복사
    from("${asciidoctor.outputDir}") {
        into 'static/docs'
    }
}

// Querydsl 설정부
def generated = "$buildDir/generated/querydsl"

querydsl {
    jpa = true
    querydslSourcesDir = generated
}
sourceSets {
    main.java.srcDir generated
}
configurations {
    querydsl.extendsFrom compileClasspath
}
compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}